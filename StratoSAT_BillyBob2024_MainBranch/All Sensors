
//BMP 388 Setup
  #include <BMP388_DEV.h>                           // Include the BMP388_DEV.h library
  
  float temperature, pressure, altitude;            // Create the temperature, pressure and altitude variables
  BMP388_DEV bmp388;                                // Instantiate (create) a BMP388_DEV object and set-up for I2C operation (address 0x77)
  
  
//NEO-M9N Setup
  #include <Wire.h> //Needed for I2C to GPS
  
  #include "SparkFun_u-blox_GNSS_Arduino_Library.h" //Click here to get the library: http://librarymanager/All#SparkFun_u-blox_GNSS
  SFE_UBLOX_GNSS myGNSS;
  
  
//BNO055 Setup
  #include <Wire.h>
  #include <Adafruit_Sensor.h>
  #include <Adafruit_BNO055.h>
  #include <utility/imumaths.h>
  
  /* This driver reads raw data from the BNO055
  
     Connections
     ===========
     Connect SCL to analog 5
     Connect SDA to analog 4
     Connect VDD to 3.3V DC
     Connect GROUND to common ground
  
     History
     =======
     2015/MAR/03  - First release (KTOWN)
  */
  
  /* Set the delay between fresh samples */
  #define BNO055_SAMPLERATE_DELAY_MS (100)
  
  // Check I2C device address and correct line below (by default address is 0x29 or 0x28)
  //                                   id, address
  Adafruit_BNO055 bno = Adafruit_BNO055(-1, 0x28, &Wire);
  
  
void setup() 
  {
    Serial.begin(115200);

    {
    //BMP388 Begin
      bmp388.begin();                                 // Default initialisation, place the BMP388 into SLEEP_MODE 
      bmp388.setTimeStandby(TIME_STANDBY_1280MS);     // Set the standby time to 1.3 seconds
      bmp388.startNormalConversion();                 // Start BMP388 continuous conversion in NORMAL_MODE  
    }

    {
    //GPS Begin
      Serial5.println("SparkFun u-blox Example");
      Serial5.println("NEO-M9N Setup");
    
      Wire.begin();
    
      //This will pipe all NMEA sentences to the serial port so we can see them
      myGNSS.setNMEAOutputPort(Serial);
    }

    {
    //BNO055 Begin
      while (!Serial) delay(10);  // wait for serial port to open!
    
      Serial.println("Orientation Sensor Raw Data Test"); Serial.println("");
    
      /* Initialise the sensor */
      if(!bno.begin())
      {
        /* There was a problem detecting the BNO055 ... check your connections */
        Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
        while(1);
      }
    
      delay(1000);
    
      /* Display the current temperature */
      int8_t temp = bno.getTemp();
      Serial.print("Current Temperature: ");
      Serial.print(temp);
      Serial.println(" C");
      Serial.println("");
    
      bno.setExtCrystalUse(true);
    
      Serial.println("Calibration status values: 0=uncalibrated, 3=fully calibrated");
    }
  }
  
void loop() 
{
  {
  //BMP388 Loop
    if (bmp388.getMeasurements(temperature, pressure, altitude))    // Check if the measurement is complete
    {
      Serial.print(temperature);                    // Display the results    
      Serial.print(F("*C   "));
      Serial.print(pressure);    
      Serial.print(F("hPa   "));
      Serial.print(altitude);
      Serial.println(F("m"));  
    }
  }


  {
  //NEO-M9N Loop
     myGNSS.checkUblox(); //See if new data is available. Process bytes as they come in.
    delay(1000)
  }


  {
  //BNO055 Loop
    // Possible vector values can be:
    // - VECTOR_ACCELEROMETER - m/s^2
    // - VECTOR_MAGNETOMETER  - uT
    // - VECTOR_GYROSCOPE     - rad/s
    // - VECTOR_EULER         - degrees
    // - VECTOR_LINEARACCEL   - m/s^2
    // - VECTOR_GRAVITY       - m/s^2
    imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  
    /* Display the floating point data */
    Serial.print("X: ");
    Serial.print(euler.x());
    Serial.print(" Y: ");
    Serial.print(euler.y());
    Serial.print(" Z: ");
    Serial.print(euler.z());
    Serial.print("\t\t");
  
    /*
    // Quaternion data
    imu::Quaternion quat = bno.getQuat();
    Serial.print("qW: ");
    Serial.print(quat.w(), 4);
    Serial.print(" qX: ");
    Serial.print(quat.x(), 4);
    Serial.print(" qY: ");
    Serial.print(quat.y(), 4);
    Serial.print(" qZ: ");
    Serial.print(quat.z(), 4);
    Serial.print("\t\t");
    */
  
    /* Display calibration status for each sensor. */
    uint8_t system, gyro, accel, mag = 0;
    bno.getCalibration(&system, &gyro, &accel, &mag);
    Serial.print("CALIBRATION: Sys=");
    Serial.print(system, DEC);
    Serial.print(" Gyro=");
    Serial.print(gyro, DEC);
    Serial.print(" Accel=");
    Serial.print(accel, DEC);
    Serial.print(" Mag=");
    Serial.println(mag, DEC);
  
    delay(BNO055_SAMPLERATE_DELAY_MS);
  }
}
